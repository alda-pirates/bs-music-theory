// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Key$BsMusicTheory = require("../src/Key.bs.js");
var Pitch$BsMusicTheory = require("../src/Pitch.bs.js");
var Interval$BsMusicTheory = require("../src/Interval.bs.js");
var Accidental$BsMusicTheory = require("../src/Accidental.bs.js");

describe("pitch", (function () {
        Jest.test("sanity", (function (param) {
                var key = Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);
                var pitch = /* record */[
                  /* key */key,
                  /* octave */1
                ];
                return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](Pitch$BsMusicTheory.addHalfstep(pitch, 12)[/* octave */1]));
              }));
        Jest.test("add halfstep", (function (param) {
                var pitch = Pitch$BsMusicTheory.addHalfstep(/* record */[
                      /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
                      /* octave */1
                    ], 1);
                var actual = pitch[/* key */0];
                var expected = /* record */[
                  /* type_ : C */0,
                  /* accidental */Accidental$BsMusicTheory.sharp
                ];
                var match = Key$BsMusicTheory.equals(actual, expected);
                if (match) {
                  return Jest.pass;
                } else {
                  return Jest.fail("");
                }
              }));
        Jest.test("subtract halfstep", (function (param) {
                var pitch$prime = Pitch$BsMusicTheory.subtractHalfstep(/* record */[
                      /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
                      /* octave */1
                    ], 1);
                var pitch$prime$prime_000 = /* key */Key$BsMusicTheory.make(/* B */6, undefined, /* () */0);
                var pitch$prime$prime = /* record */[
                  pitch$prime$prime_000,
                  /* octave */0
                ];
                return Jest.Expect[/* toEqual */12](pitch$prime$prime, Jest.Expect[/* expect */0](pitch$prime));
              }));
        return Jest.test("subtractPitch", (function (param) {
                      var c1_000 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);
                      var c1 = /* record */[
                        c1_000,
                        /* octave */1
                      ];
                      var d1_000 = /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0);
                      var d1 = /* record */[
                        d1_000,
                        /* octave */1
                      ];
                      var actual = Pitch$BsMusicTheory.subtractPitch(d1, c1);
                      return Jest.Expect[/* toEqual */12](Interval$BsMusicTheory.major2, Jest.Expect[/* expect */0](actual));
                    }));
      }));

/*  Not a pure module */
