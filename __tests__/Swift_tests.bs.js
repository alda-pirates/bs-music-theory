// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Key$BsMusicTheory = require("../src/Key.bs.js");
var Util$BsMusicTheory = require("../src/Util.bs.js");
var Chord$BsMusicTheory = require("../src/Chord.bs.js");
var Pitch$BsMusicTheory = require("../src/Pitch.bs.js");
var Scale$BsMusicTheory = require("../src/Scale.bs.js");
var Tempo$BsMusicTheory = require("../src/Tempo.bs.js");
var Interval$BsMusicTheory = require("../src/Interval.bs.js");
var ChordType$BsMusicTheory = require("../src/ChordType.bs.js");
var NoteValue$BsMusicTheory = require("../src/NoteValue.bs.js");
var ScaleType$BsMusicTheory = require("../src/ScaleType.bs.js");
var Accidental$BsMusicTheory = require("../src/Accidental.bs.js");

var c0 = Pitch$BsMusicTheory.makeWithInteger(12);

var c0$1 = Pitch$BsMusicTheory.makeWithInteger(12);

var pitch = Pitch$BsMusicTheory.makeWithMidiNote(127, undefined, /* () */0);

var pitch$1 = Pitch$BsMusicTheory.makeWithMidiNote(0, undefined, /* () */0);

var pitch$2 = Pitch$BsMusicTheory.makeWithMidiNote(66, false, /* () */0);

var c1_000 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c1 = /* record */[
  c1_000,
  /* octave */1
];

var db1_000 = /* key */Key$BsMusicTheory.makeWithString("db");

var db1 = /* record */[
  db1_000,
  /* octave */1
];

var match = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.addInterval(c1, Interval$BsMusicTheory.minor2), db1);

var c1_000$1 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c1$1 = /* record */[
  c1_000$1,
  /* octave */1
];

var d1_000 = /* key */Key$BsMusicTheory.makeWithString("d");

var d1 = /* record */[
  d1_000,
  /* octave */1
];

var match$1 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.addInterval(c1$1, Interval$BsMusicTheory.major2), d1);

var c1_000$2 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c1$2 = /* record */[
  c1_000$2,
  /* octave */1
];

var eb1_000 = /* key */Key$BsMusicTheory.makeWithString("eb");

var eb1 = /* record */[
  eb1_000,
  /* octave */1
];

var match$2 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.addInterval(c1$2, Interval$BsMusicTheory.minor3), eb1);

var c1_000$3 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c1$3 = /* record */[
  c1_000$3,
  /* octave */1
];

var e1_000 = /* key */Key$BsMusicTheory.makeWithString("e");

var e1 = /* record */[
  e1_000,
  /* octave */1
];

var match$3 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.addInterval(c1$3, Interval$BsMusicTheory.major3), e1);

var c1_000$4 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c1$4 = /* record */[
  c1_000$4,
  /* octave */1
];

var c2_000 = /* key */Key$BsMusicTheory.makeWithString("C");

var c2 = /* record */[
  c2_000,
  /* octave */2
];

var match$4 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.addInterval(c1$4, Interval$BsMusicTheory.perfect8), c2);

var d1_000$1 = /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0);

var d1$1 = /* record */[
  d1_000$1,
  /* octave */1
];

var csharp1_000 = /* key */Key$BsMusicTheory.makeWithString("C#");

var csharp1 = /* record */[
  csharp1_000,
  /* octave */1
];

var match$5 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.subtractInterval(d1$1, Interval$BsMusicTheory.minor2), csharp1);

var d1_000$2 = /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0);

var d1$2 = /* record */[
  d1_000$2,
  /* octave */1
];

var c1_000$5 = /* key */Key$BsMusicTheory.makeWithString("C");

var c1$5 = /* record */[
  c1_000$5,
  /* octave */1
];

var match$6 = Pitch$BsMusicTheory.equals(Pitch$BsMusicTheory.subtractInterval(d1$2, Interval$BsMusicTheory.major2), c1$5);

var p = Pitch$BsMusicTheory.makeWithString("f#-5");

var fsharp = Key$BsMusicTheory.makeWithString("f#");

var p$1 = Pitch$BsMusicTheory.makeWithString("f#-5");

Jest.testAll("pitches", /* :: */[
      Jest.Expect[/* toEqual */12](/* tuple */[
            0,
            /* Natural */0,
            /* C */0
          ], Jest.Expect[/* expect */0](/* tuple */[
                c0[/* octave */1],
                c0[/* key */0][/* accidental */1],
                c0[/* key */0][/* type_ */0]
              ])),
      /* :: */[
        Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Pitch$BsMusicTheory.rawValue(Pitch$BsMusicTheory.subtractHalfstep(c0$1, 12)))),
        /* :: */[
          Jest.Expect[/* toEqual */12](Key$BsMusicTheory.make(/* G */4, undefined, /* () */0), Jest.Expect[/* expect */0](pitch[/* key */0])),
          /* :: */[
            Jest.Expect[/* toEqual */12](Key$BsMusicTheory.make(/* C */0, undefined, /* () */0), Jest.Expect[/* expect */0](pitch$1[/* key */0])),
            /* :: */[
              Jest.Expect[/* toEqual */12](/* record */[
                    /* type_ : G */4,
                    /* accidental */Accidental$BsMusicTheory.flat
                  ], Jest.Expect[/* expect */0](pitch$2[/* key */0])),
              /* :: */[
                match ? Jest.pass : Jest.fail(""),
                /* :: */[
                  match$1 ? Jest.pass : Jest.fail(""),
                  /* :: */[
                    match$2 ? Jest.pass : Jest.fail(""),
                    /* :: */[
                      match$3 ? Jest.pass : Jest.fail(""),
                      /* :: */[
                        match$4 ? Jest.pass : Jest.fail(""),
                        /* :: */[
                          match$5 ? Jest.pass : Jest.fail(""),
                          /* :: */[
                            match$6 ? Jest.pass : Jest.fail(""),
                            /* :: */[
                              Jest.Expect[/* toEqual */12](fsharp, Jest.Expect[/* expect */0](p[/* key */0])),
                              /* :: */[
                                Jest.Expect[/* toEqual */12](-5, Jest.Expect[/* expect */0](p$1[/* octave */1])),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], (function (assertion) {
        return assertion;
      }));

var note_000 = /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0);

var note = /* record */[
  note_000,
  /* octave */4
];

var note_000$1 = /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0);

var note$1 = /* record */[
  note_000$1,
  /* octave */4
];

var a4 = Pitch$BsMusicTheory.nearest(440.0);

Jest.testAll("frequency", /* :: */[
      Jest.Expect[/* toEqual */12](440.0, Jest.Expect[/* expect */0](Pitch$BsMusicTheory.frequency(note))),
      /* :: */[
        Jest.Expect[/* toEqual */12](note$1, Jest.Expect[/* expect */0](a4)),
        /* [] */0
      ]
    ], (function (assertion) {
        return assertion;
      }));

var actual = NoteValue$BsMusicTheory.div(/* record */[
      /* type_ : Half */2,
      /* modifier : Dotted */1
    ], /* Sixteenth */5);

var actual$1 = NoteValue$BsMusicTheory.div(/* record */[
      /* type_ : Half */2,
      /* modifier : Dotted */1
    ], /* Whole */1);

Jest.testAll("note value conversison", /* :: */[
      Jest.Expect[/* toBe */2](12.0, Jest.Expect[/* expect */0](actual)),
      /* :: */[
        Jest.Expect[/* toBe */2](0.75, Jest.Expect[/* expect */0](actual$1)),
        /* [] */0
      ]
    ], (function (assertion) {
        return assertion;
      }));

var tempo_000 = /* timeSignature : record */[
  /* beats */4,
  /* noteValue : Quarter */3
];

var tempo = /* record */[
  tempo_000,
  /* bpm */120
];

var noteValue = NoteValue$BsMusicTheory.makeWithType(/* Quarter */3);

var duration = Tempo$BsMusicTheory.duration(tempo, noteValue, /* () */0);

var tempo_000$1 = /* timeSignature : record */[
  /* beats */4,
  /* noteValue : Quarter */3
];

var tempo$1 = /* record */[
  tempo_000$1,
  /* bpm */120
];

var duration$1 = Tempo$BsMusicTheory.duration(tempo$1, /* record */[
      /* type_ : Quarter */3,
      /* modifier : Dotted */1
    ], /* () */0);

Jest.testAll("durations", /* :: */[
      Jest.Expect[/* toEqual */12](0.5, Jest.Expect[/* expect */0](duration)),
      /* :: */[
        Jest.Expect[/* toEqual */12](0.75, Jest.Expect[/* expect */0](duration$1)),
        /* [] */0
      ]
    ], (function (assertion) {
        return assertion;
      }));

Jest.test("sample length calculations", (function (param) {
        var tempo = Tempo$BsMusicTheory.make(undefined, undefined, /* () */0);
        var round = function (f) {
          var match = f - Math.floor(f) >= 0.5;
          if (match) {
            return Math.ceil(f);
          } else {
            return Math.floor(f);
          }
        };
        var actual = Belt_List.map(Belt_List.map(/* :: */[
                  /* record */[
                    /* type_ : Whole */1,
                    /* modifier : Default */0
                  ],
                  /* :: */[
                    /* record */[
                      /* type_ : Half */2,
                      /* modifier : Default */0
                    ],
                    /* :: */[
                      /* record */[
                        /* type_ : Half */2,
                        /* modifier : Dotted */1
                      ],
                      /* :: */[
                        /* record */[
                          /* type_ : Half */2,
                          /* modifier : Triplet */2
                        ],
                        /* :: */[
                          /* record */[
                            /* type_ : Quarter */3,
                            /* modifier : Default */0
                          ],
                          /* :: */[
                            /* record */[
                              /* type_ : Quarter */3,
                              /* modifier : Dotted */1
                            ],
                            /* :: */[
                              /* record */[
                                /* type_ : Quarter */3,
                                /* modifier : Triplet */2
                              ],
                              /* :: */[
                                /* record */[
                                  /* type_ : Eighth */4,
                                  /* modifier : Default */0
                                ],
                                /* :: */[
                                  /* record */[
                                    /* type_ : Eighth */4,
                                    /* modifier : Dotted */1
                                  ],
                                  /* :: */[
                                    /* record */[
                                      /* type_ : Sixteenth */5,
                                      /* modifier : Default */0
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* type_ : Sixteenth */5,
                                        /* modifier : Dotted */1
                                      ],
                                      /* :: */[
                                        /* record */[
                                          /* type_ : Thirtysecond */6,
                                          /* modifier : Default */0
                                        ],
                                        /* :: */[
                                          /* record */[
                                            /* type_ : Sixtyfourth */7,
                                            /* modifier : Default */0
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ], (function (rate) {
                    return Tempo$BsMusicTheory.sampleLength(tempo, rate, undefined, /* () */0);
                  })), (function (sampleLength) {
                return round(100 * sampleLength) / 100;
              }));
        return Jest.Expect[/* toEqual */12](/* :: */[
                    88200.0,
                    /* :: */[
                      44100.0,
                      /* :: */[
                        66150.0,
                        /* :: */[
                          29401.47,
                          /* :: */[
                            22050.0,
                            /* :: */[
                              33075.0,
                              /* :: */[
                                14700.73,
                                /* :: */[
                                  11025.0,
                                  /* :: */[
                                    16537.5,
                                    /* :: */[
                                      5512.5,
                                      /* :: */[
                                        8268.75,
                                        /* :: */[
                                          2756.25,
                                          /* :: */[
                                            1378.13,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ], Jest.Expect[/* expect */0](actual));
      }));

var cMaj_000 = Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMaj_001 = /* :: */[
  Key$BsMusicTheory.make(/* D */1, undefined, /* () */0),
  /* :: */[
    Key$BsMusicTheory.make(/* E */2, undefined, /* () */0),
    /* :: */[
      Key$BsMusicTheory.make(/* F */3, undefined, /* () */0),
      /* :: */[
        Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
        /* :: */[
          Key$BsMusicTheory.make(/* A */5, undefined, /* () */0),
          /* :: */[
            Key$BsMusicTheory.make(/* B */6, undefined, /* () */0),
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var cMaj = /* :: */[
  cMaj_000,
  cMaj_001
];

var cMajScale_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMajScale = /* record */[
  /* type_ */ScaleType$BsMusicTheory.major,
  cMajScale_001
];

var cMin_000 = Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMin_001 = /* :: */[
  Key$BsMusicTheory.make(/* D */1, undefined, /* () */0),
  /* :: */[
    Key$BsMusicTheory.makeWithString("Eb"),
    /* :: */[
      Key$BsMusicTheory.make(/* F */3, undefined, /* () */0),
      /* :: */[
        Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
        /* :: */[
          Key$BsMusicTheory.makeWithString("Ab"),
          /* :: */[
            Key$BsMusicTheory.makeWithString("Bb"),
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var cMin = /* :: */[
  cMin_000,
  cMin_001
];

var cMinScale_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMinScale = /* record */[
  /* type_ */ScaleType$BsMusicTheory.minor,
  cMinScale_001
];

Jest.testAll("scales", /* :: */[
      Jest.Expect[/* toEqual */12](cMaj, Jest.Expect[/* expect */0](Scale$BsMusicTheory.keys(cMajScale))),
      /* :: */[
        Jest.Expect[/* toEqual */12](cMin, Jest.Expect[/* expect */0](Scale$BsMusicTheory.keys(cMinScale))),
        /* [] */0
      ]
    ], (function (assertion) {
        return assertion;
      }));

Jest.test("harmonic fields", (function (param) {
        var cMaj_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);
        var cMaj = /* record */[
          /* type_ */ScaleType$BsMusicTheory.major,
          cMaj_001
        ];
        var triads = Scale$BsMusicTheory.harmonicField(cMaj, /* Triad */0, undefined, /* () */0);
        var triadsExpected_000 = /* record */[
          /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, undefined, undefined, undefined, /* () */0),
          /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
          /* inversion */0
        ];
        var triadsExpected_001 = /* :: */[
          /* record */[
            /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, undefined, /* () */0),
            /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0),
            /* inversion */0
          ],
          /* :: */[
            /* record */[
              /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, undefined, /* () */0),
              /* key */Key$BsMusicTheory.make(/* E */2, undefined, /* () */0),
              /* inversion */0
            ],
            /* :: */[
              /* record */[
                /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, undefined, undefined, undefined, /* () */0),
                /* key */Key$BsMusicTheory.make(/* F */3, undefined, /* () */0),
                /* inversion */0
              ],
              /* :: */[
                /* record */[
                  /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, undefined, undefined, undefined, /* () */0),
                  /* key */Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
                  /* inversion */0
                ],
                /* :: */[
                  /* record */[
                    /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, undefined, /* () */0),
                    /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0),
                    /* inversion */0
                  ],
                  /* :: */[
                    /* record */[
                      /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, /* Diminished */1, undefined, undefined, undefined, undefined, /* () */0),
                      /* key */Key$BsMusicTheory.make(/* B */6, undefined, /* () */0),
                      /* inversion */0
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ];
        var triadsExpected = /* :: */[
          triadsExpected_000,
          triadsExpected_001
        ];
        return Jest.Expect[/* toEqual */12](triadsExpected, Jest.Expect[/* expect */0](triads));
      }));

var cMajNotes_000 = Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMajNotes_001 = /* :: */[
  Key$BsMusicTheory.make(/* E */2, undefined, /* () */0),
  /* :: */[
    Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
    /* [] */0
  ]
];

var cMajNotes = /* :: */[
  cMajNotes_000,
  cMajNotes_001
];

var cMaj_000$1 = /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, undefined, undefined, undefined, /* () */0);

var cMaj_001$1 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMaj$1 = /* record */[
  cMaj_000$1,
  cMaj_001$1,
  /* inversion */0
];

var cMinNotes_000 = Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMinNotes_001 = /* :: */[
  /* record */[
    /* type_ : E */2,
    /* accidental */Accidental$BsMusicTheory.flat
  ],
  /* :: */[
    Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
    /* [] */0
  ]
];

var cMinNotes = /* :: */[
  cMinNotes_000,
  cMinNotes_001
];

var cMin_000$1 = /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, undefined, /* () */0);

var cMin_001$1 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMin$1 = /* record */[
  cMin_000$1,
  cMin_001$1,
  /* inversion */0
];

var c13Pitches_000 = /* record */[
  /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
  /* octave */1
];

var c13Pitches_001 = /* :: */[
  /* record */[
    /* key */Key$BsMusicTheory.make(/* E */2, undefined, /* () */0),
    /* octave */1
  ],
  /* :: */[
    /* record */[
      /* key */Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
      /* octave */1
    ],
    /* :: */[
      /* record */[
        /* key : record */[
          /* type_ : B */6,
          /* accidental */Accidental$BsMusicTheory.flat
        ],
        /* octave */1
      ],
      /* :: */[
        /* record */[
          /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0),
          /* octave */2
        ],
        /* :: */[
          /* record */[
            /* key */Key$BsMusicTheory.make(/* F */3, undefined, /* () */0),
            /* octave */2
          ],
          /* :: */[
            /* record */[
              /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0),
              /* octave */2
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var c13Pitches = /* :: */[
  c13Pitches_000,
  c13Pitches_001
];

var c13_000 = /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, /* Dominant */1, undefined, /* :: */[
      ChordType$BsMusicTheory.ChordExtensionType[/* make */1](/* Thirteenth */2, undefined, /* () */0),
      /* [] */0
    ], /* () */0);

var c13_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var c13 = /* record */[
  c13_000,
  c13_001,
  /* inversion */0
];

var actual$2 = Chord$BsMusicTheory.pitches(c13, 1, /* () */0);

var cm13Pitches_000 = /* record */[
  /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
  /* octave */1
];

var cm13Pitches_001 = /* :: */[
  /* record */[
    /* key : record */[
      /* type_ : E */2,
      /* accidental */Accidental$BsMusicTheory.flat
    ],
    /* octave */1
  ],
  /* :: */[
    /* record */[
      /* key */Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
      /* octave */1
    ],
    /* :: */[
      /* record */[
        /* key : record */[
          /* type_ : B */6,
          /* accidental */Accidental$BsMusicTheory.flat
        ],
        /* octave */1
      ],
      /* :: */[
        /* record */[
          /* key */Key$BsMusicTheory.make(/* D */1, undefined, /* () */0),
          /* octave */2
        ],
        /* :: */[
          /* record */[
            /* key */Key$BsMusicTheory.make(/* F */3, undefined, /* () */0),
            /* octave */2
          ],
          /* :: */[
            /* record */[
              /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0),
              /* octave */2
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var cm13Pitches = /* :: */[
  cm13Pitches_000,
  cm13Pitches_001
];

var cm13_000 = /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, /* Dominant */1, undefined, /* :: */[
      ChordType$BsMusicTheory.ChordExtensionType[/* make */1](/* Thirteenth */2, undefined, /* () */0),
      /* [] */0
    ], /* () */0);

var cm13_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cm13 = /* record */[
  cm13_000,
  cm13_001,
  /* inversion */0
];

var actual$3 = Chord$BsMusicTheory.pitches(cm13, 1, /* () */0);

var minorIntervals_001 = /* :: */[
  Interval$BsMusicTheory.minor3,
  /* :: */[
    Interval$BsMusicTheory.perfect5,
    /* [] */0
  ]
];

var minorIntervals = /* :: */[
  Interval$BsMusicTheory.perfect1,
  minorIntervals_001
];

var match$7 = ChordType$BsMusicTheory.makeWithIntervals(minorIntervals);

var majorIntervals_001 = /* :: */[
  Interval$BsMusicTheory.major3,
  /* :: */[
    Interval$BsMusicTheory.perfect5,
    /* [] */0
  ]
];

var majorIntervals = /* :: */[
  Interval$BsMusicTheory.perfect1,
  majorIntervals_001
];

var match$8 = ChordType$BsMusicTheory.makeWithIntervals(majorIntervals);

var cmadd13Notes_000 = /* record */[
  /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0),
  /* octave */1
];

var cmadd13Notes_001 = /* :: */[
  /* record */[
    /* key : record */[
      /* type_ : E */2,
      /* accidental */Accidental$BsMusicTheory.flat
    ],
    /* octave */1
  ],
  /* :: */[
    /* record */[
      /* key */Key$BsMusicTheory.make(/* G */4, undefined, /* () */0),
      /* octave */1
    ],
    /* :: */[
      /* record */[
        /* key */Key$BsMusicTheory.make(/* A */5, undefined, /* () */0),
        /* octave */2
      ],
      /* [] */0
    ]
  ]
];

var cmadd13Notes = /* :: */[
  cmadd13Notes_000,
  cmadd13Notes_001
];

var cmadd13_000 = /* type_ */ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, /* :: */[
      ChordType$BsMusicTheory.ChordExtensionType[/* make */1](/* Thirteenth */2, undefined, /* () */0),
      /* [] */0
    ], /* () */0);

var cmadd13_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cmadd13 = /* record */[
  cmadd13_000,
  cmadd13_001,
  /* inversion */0
];

var actual$4 = Chord$BsMusicTheory.pitches(cmadd13, 1, /* () */0);

Jest.testAll("chords", /* :: */[
      Jest.Expect[/* toEqual */12](Chord$BsMusicTheory.keys(cMaj$1), Jest.Expect[/* expect */0](cMajNotes)),
      /* :: */[
        Jest.Expect[/* toEqual */12](Chord$BsMusicTheory.keys(cMin$1), Jest.Expect[/* expect */0](cMinNotes)),
        /* :: */[
          Jest.Expect[/* toEqual */12](c13Pitches, Jest.Expect[/* expect */0](actual$2)),
          /* :: */[
            Jest.Expect[/* toEqual */12](cm13Pitches, Jest.Expect[/* expect */0](actual$3)),
            /* :: */[
              match$7 !== undefined ? Jest.Expect[/* toEqual */12](ChordType$BsMusicTheory.make(/* Minor */1, undefined, undefined, undefined, undefined, undefined, /* () */0), Jest.Expect[/* expect */0](match$7)) : Jest.fail(""),
              /* :: */[
                match$8 !== undefined ? Jest.Expect[/* toEqual */12](ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, undefined, undefined, undefined, /* () */0), Jest.Expect[/* expect */0](match$8)) : Jest.fail(""),
                /* :: */[
                  Jest.Expect[/* toEqual */12](cmadd13Notes, Jest.Expect[/* expect */0](actual$4)),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], (function (assertion) {
        return assertion;
      }));

var cMaj_001$2 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMaj$2 = /* record */[
  /* type_ */ScaleType$BsMusicTheory.major,
  cMaj_001$2
];

var cmajChords = Scale$BsMusicTheory.harmonicField(cMaj$2, /* Triad */0, undefined, /* () */0);

var cMin_001$2 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);

var cMin$2 = /* record */[
  /* type_ */ScaleType$BsMusicTheory.minor,
  cMin_001$2
];

var cminChords = Scale$BsMusicTheory.harmonicField(cMin$2, /* Triad */0, undefined, /* () */0);

Jest.testAll("roman numerics", /* :: */[
      Jest.Expect[/* toEqual */12](/* :: */[
            "I",
            /* :: */[
              "ii",
              /* :: */[
                "iii",
                /* :: */[
                  "IV",
                  /* :: */[
                    "V",
                    /* :: */[
                      "vi",
                      /* :: */[
                        "vii\xc2\xb0",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ], Jest.Expect[/* expect */0](Belt_List.keepMap(Belt_List.map(cmajChords, (function (__x) {
                          return Chord$BsMusicTheory.romanNumeric(__x, cMaj$2);
                        })), Util$BsMusicTheory.identity))),
      /* :: */[
        Jest.Expect[/* toEqual */12](/* :: */[
              "i",
              /* :: */[
                "ii\xc2\xb0",
                /* :: */[
                  "III",
                  /* :: */[
                    "iv",
                    /* :: */[
                      "v",
                      /* :: */[
                        "VI",
                        /* :: */[
                          "VII",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ], Jest.Expect[/* expect */0](Belt_List.keepMap(Belt_List.map(cminChords, (function (__x) {
                            return Chord$BsMusicTheory.romanNumeric(__x, cMin$2);
                          })), Util$BsMusicTheory.identity))),
        /* [] */0
      ]
    ], (function (assertion) {
        return assertion;
      }));

Jest.test("inversions", (function (param) {
        var c7_000 = /* type_ */ChordType$BsMusicTheory.make(/* Major */0, undefined, undefined, /* Dominant */1, undefined, undefined, /* () */0);
        var c7_001 = /* key */Key$BsMusicTheory.make(/* C */0, undefined, /* () */0);
        var c7 = /* record */[
          c7_000,
          c7_001,
          /* inversion */0
        ];
        var c7Inversions_000 = /* :: */[
          /* record */[
            /* key : record */[
              /* type_ : C */0,
              /* accidental : Natural */0
            ],
            /* octave */1
          ],
          /* :: */[
            /* record */[
              /* key : record */[
                /* type_ : E */2,
                /* accidental : Natural */0
              ],
              /* octave */1
            ],
            /* :: */[
              /* record */[
                /* key : record */[
                  /* type_ : G */4,
                  /* accidental : Natural */0
                ],
                /* octave */1
              ],
              /* :: */[
                /* record */[
                  /* key : record */[
                    /* type_ : B */6,
                    /* accidental */Accidental$BsMusicTheory.flat
                  ],
                  /* octave */1
                ],
                /* [] */0
              ]
            ]
          ]
        ];
        var c7Inversions_001 = /* :: */[
          /* :: */[
            /* record */[
              /* key : record */[
                /* type_ : E */2,
                /* accidental : Natural */0
              ],
              /* octave */1
            ],
            /* :: */[
              /* record */[
                /* key : record */[
                  /* type_ : G */4,
                  /* accidental : Natural */0
                ],
                /* octave */1
              ],
              /* :: */[
                /* record */[
                  /* key : record */[
                    /* type_ : B */6,
                    /* accidental */Accidental$BsMusicTheory.flat
                  ],
                  /* octave */1
                ],
                /* :: */[
                  /* record */[
                    /* key : record */[
                      /* type_ : C */0,
                      /* accidental : Natural */0
                    ],
                    /* octave */2
                  ],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* record */[
                /* key : record */[
                  /* type_ : G */4,
                  /* accidental : Natural */0
                ],
                /* octave */1
              ],
              /* :: */[
                /* record */[
                  /* key : record */[
                    /* type_ : B */6,
                    /* accidental */Accidental$BsMusicTheory.flat
                  ],
                  /* octave */1
                ],
                /* :: */[
                  /* record */[
                    /* key : record */[
                      /* type_ : C */0,
                      /* accidental : Natural */0
                    ],
                    /* octave */2
                  ],
                  /* :: */[
                    /* record */[
                      /* key : record */[
                        /* type_ : E */2,
                        /* accidental : Natural */0
                      ],
                      /* octave */2
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* record */[
                  /* key : record */[
                    /* type_ : B */6,
                    /* accidental */Accidental$BsMusicTheory.flat
                  ],
                  /* octave */1
                ],
                /* :: */[
                  /* record */[
                    /* key : record */[
                      /* type_ : C */0,
                      /* accidental : Natural */0
                    ],
                    /* octave */2
                  ],
                  /* :: */[
                    /* record */[
                      /* key : record */[
                        /* type_ : E */2,
                        /* accidental : Natural */0
                      ],
                      /* octave */2
                    ],
                    /* :: */[
                      /* record */[
                        /* key : record */[
                          /* type_ : G */4,
                          /* accidental : Natural */0
                        ],
                        /* octave */2
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ];
        var c7Inversions = /* :: */[
          c7Inversions_000,
          c7Inversions_001
        ];
        console.log(Belt_List.toArray(Belt_List.map(Chord$BsMusicTheory.inversions(c7), (function (chord) {
                        return Belt_List.toArray(Belt_List.map(Chord$BsMusicTheory.pitches(chord, 1, /* () */0), Pitch$BsMusicTheory.description));
                      }))), "pitches");
        console.log(Belt_List.toArray(Belt_List.map(c7Inversions, (function (x) {
                        return Belt_List.toArray(Belt_List.map(x, Pitch$BsMusicTheory.description));
                      }))));
        return Jest.Expect[/* toEqual */12](c7Inversions, Jest.Expect[/* expect */0](Belt_List.map(Chord$BsMusicTheory.inversions(c7), (function (chord) {
                              return Chord$BsMusicTheory.pitches(chord, 1, /* () */0);
                            }))));
      }));

/*  Not a pure module */
